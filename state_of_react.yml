locale: ua-UA
translations:
  ###########################################################################
  # General
  ###########################################################################

  - key: general.state_of_react.intro
    t: |
      React існує вже досить довго, і це очевидно, що він став одним із домінантних фреймворків для клієнтської частини.

      Однак, незважаючи на це, React продовжує швидко розвиватися, і спільнота робить все можливе, щоб встигати за цим.

      За допомогою опитування розробників "Стан React" ми сподіваємося осягнути цю еволюцію та допомогти розробникам зорієнтуватися у величезній екосистемі React.

  - key: general.state_of_react.description
    t: Щорічне опитування розробників щодо екосистеми React

  - key: features.features_intro_react
    t: |
      Ласкаво просимо до опитування! Ця перша частина присвячена тому, 
      щоб з'ясувати, які з офіційних API React ви знаєте та використовуєте.

      До речі, якщо ви бажаєте розповісти нам більше про будь-який із ваших виборів, просто натисніть на маленьку іконку "коментар"!

  - key: tools.tools_intro_react
    t: |
      Наступні кілька розділів присвячені **бібліотекам** та **фреймворкам**, 
      які складають екосистему React. Розкажіть, від чого ви в захваті!

  # sections
  - key: sections.main_apis.title
    t: Основні API
    aliases:
      - features.main_apis
  - key: sections.main_apis.description
    t: Стабільні, загальновідомі функції React

  - key: sections.hooks.title
    t: Хуки
    aliases:
      - features.hooks
  - key: sections.hooks.description
    t: Вбудовані хуки React

  - key: sections.new_apis.title
    t: Нові функції
    aliases:
      - features.new_apis
  - key: sections.new_apis.description
    t: Нещодавно додані або експериментальні API та функції

  - key: sections.component_libraries.title
    t: Бібліотеки компонентів
    aliases:
      - tools.component_libraries
  - key: sections.component_libraries.description
    t: Елементи для побудови вашого застосунку

  # - key: sections.data_management.title
  #   t: Data Management
  # - key: sections.data_management.description
  #   t: Loading and managing application data

  - key: sections.state_management.title
    t: Управління станом
    aliases:
      - tools.state_management
  - key: sections.state_management.description
    t: Бібліотеки для управління станом застосунку

  - key: sections.data_loading.title
    t: Завантаження даних
    aliases:
      - tools.data_loading
  - key: sections.data_loading.description
    t: Інструменти для завантаження та управління даними

  - key: sections.back_end_infrastructure.title
    t: Серверна частина та інфраструктура
    aliases:
      - tools.back_end_infrastructure
  - key: sections.back_end_infrastructure.description
    t: Пакування та обслуговування вашого застосунку

  # - key: sections.usage.title
  #   t: Back-End & Infrastructure
  # - key: sections.usage.description
  #   t: Bundling & serving your app

  # old sections

  # - key: sections.ui_libraries.title
  #   t: UI Libraries
  # - key: sections.ui_libraries.description
  #   t: Component libraries and other UI toolkits.

  # - key: sections.meta_frameworks.title
  #   t: Meta Frameworks
  # - key: sections.meta_frameworks.description
  #   t: Frameworks that help render and serve your React app

  # - key: sections.testing.title
  #   t: Testing
  # - key: sections.testing.description
  #   t: Testing utilities and libraries

  - key: sections.tools.title
    t: Інші інструменти
  - key: sections.tools.description
    t: Інші інструменти та бібліотеки для React

  - key: sections.usage_react.title
    t: Використання
  - key: sections.usage_react.description
    t: Як ви використовуєте React щодня

  - key: tools.data_loading_heading
    t: Бібліотеки завантаження даних

  - key: tools.state_management_heading
    t: Бібліотеки управління станом

  # features

  - key: features.main_apis_ratios
    t: Main APIs Over Time

  - key: features.hooks_ratios
    t: Hooks Over Time

  - key: features.new_apis_ratios
    t: New APIs Over Time

  - key: features.main_apis_pain_points
    t: Проблеми основних API
  - key: features.main_apis_pain_points.question
    t: З якими проблемами ви стикалися під час використання вищезазначених API?

  - key: features.hooks_pain_points
    t: Проблеми хуків
  - key: features.hooks_pain_points.question
    t: З якими проблемами ви стикалися під час використання хуків?

  - key: features.new_apis_pain_points
    t: Проблеми нових API
  - key: features.new_apis_pain_points.question
    t: З якими проблемами ви стикалися під час використання нових API?

  # main features
  - key: features.fragment.description
    t: >
      `<Fragment>`, що часто використовується за допомогою синтаксису `<>...</>`, дає змогу групувати елементи без використання вузла-обгортки.
  - key: features.profiler.description
    t: >
      `<Profiler>` дає змогу програмно вимірювати продуктивність рендерингу дерева React.
  - key: features.strictmode.description
    t: >
      `<StrictMode>` дає змогу виявляти поширені дефекти у ваших компонентах на ранніх стадіях розробки.

  - key: features.createportal.description
    t: >
      `createPortal` дає змогу рендерити деякі дочірні елементи в іншій частині DOM.

  - key: features.createcontext.description
    t: >
      `createContext` дає змогу створювати контекст, який компоненти можуть надавати або читати.

  - key: features.forwardref.description
    t: >
      `forwardRef` дає змогу вашому компоненту надати доступ до DOM-вузла батьківському компоненту за допомогою ref.

  - key: features.lazy.description
    t: >
      `lazy` дає змогу відстрочувати завантаження коду компонента до моменту його першого рендеру.

  - key: features.memo.description
    t: >
      `memo` дає змогу уникнути повторного рендеру компонента, коли його властивості (props) не змінюються.

  - key: features.createroot.description
    t: >
      `createRoot` дає змогу створити кореневий компонент для відображення React-компонентів всередині браузерного DOM-вузла.

  - key: features.hydrateroot.description
    t: >
      `hydrateRoot` дає змогу відображати React-компоненти всередині браузерного DOM-вузла, HTML-вміст якого було раніше згенеровано за допомогою `react-dom/server`.

  # hooks

  - key: features.usecallback.description
    t: >
      `useCallback` — це хук React, який дає змогу кешувати визначення функції між повторними рендерами.

  - key: features.usecontext.description
    t: >
      `useContext` — це хук React, який дає змогу читати та підписуватися на контекст із вашого компонента.

  - key: features.usedebugvalue.description
    t: >
      `useDebugValue` — це хук React, який дає змогу додавати мітку до вашого власного хука в інструментах розробника React.

  - key: features.usedeferredvalue.description
    t: >
      `useDeferredValue` — це хук React, який дає змогу відстрочувати оновлення частини UI.

  - key: features.useeffect.description
    t: >
      `useEffect` — це хук React, який дає змогу синхронізувати компонент із зовнішньою системою.

  - key: features.useid.description
    t: >
      `useId` — це хук React для генерації унікальних ідентифікаторів, які можна передавати до атрибутів доступності.

  - key: features.usememo.description
    t: >
      `useMemo` — це хук React, який дає змогу кешувати результат розрахунку між повторними рендерами.

  - key: features.usereducer.description
    t: >
      `useReducer` — це хук React, який дає змогу додавати редуктор до вашого компонента.

  - key: features.useref.description
    t: >
      `useRef` — це хук React, який дає змогу посилатися на значення, яке не потрібно для рендерингу.

  - key: features.usestate.description
    t: >
      `useState` — це хук React, який дає змогу додавати змінну стану до вашого компонента.

  - key: features.usesyncexternalstore.description
    t: >
      `useSyncExternalStore` — це хук React, який дає змогу підписуватися на зовнішнє сховище.

  - key: features.usetransition.description
    t: >
      `useTransition` — це хук React, який дає змогу оновлювати стан без блокування UI.

  # new features

  - key: features.suspense.description
    t: >
      `<Suspense>` дає змогу відображати початковий вміст, поки його дочірні елементи не завантажені.

  - key: features.use_hook.description
    t: >
      `use` — це API React, який дає змогу читати значення певного ресурсу, як-от Promise або контекст.

  - key: features.starttransition.description
    t: >
      `startTransition` дає змогу оновити стан без блокування UI.

  - key: features.react_server_components.description
    t: >
      Компоненти, які працюють виключно на сервері.

  - key: features.use_client.description
    t: >
      `'use client'` позначає вихідні файли, компоненти яких виконуються з боку клієнта.

  - key: features.use_server.description
    t: >
      `'use server'` позначає серверні функції, які можна викликати з коду клієнта.

  - key: features.server_actions.description
    t: >
      Вбудоване рішення React для мутацій із боку сервера.

  - key: features.taint_api.description
    t: >
      Запобігає передаванню певного об'єкта або значення до клієнтського компонента.

  - key: features.cache.description
    t: >
      `cache` дає змогу кешувати результат отримання даних або обчислення.

  - key: features.useformstatus.description
    t: >
      `useFormStatus` — це хук, який надає інформацію про статус останнього надсилання форми.

  - key: features.useformstate.description
    t: >
      `useFormState` — це хук, який дає змогу оновлювати стан залежно від результату дії форми.

  # tools

  - key: tools.component_libraries_others
    t: Інші бібліотеки компонентів
  - key: tools.component_libraries_others.question
    t: Які ще бібліотеки компонентів ви використовували?

  - key: tools.component_libraries_pain_points
    t: Проблеми у роботі з компонентами
  - key: tools.component_libraries_pain_points.question
    t: З якими проблемами ви стикалися під час роботи з компонентами?

  # - key: tools.ui_libraries_happiness
  #   t: Happiness
  # - key: tools.ui_libraries_happiness.description
  #   t: How happy are you with the state of UI libraries?

  - key: tools.state_management_others
    t: Інші бібліотеки для управління станом
  - key: tools.state_management_others.question
    t: Які ще бібліотеки ви використовували для управління станом у ваших застосунках?

  - key: tools.state_management_pain_points
    t: Проблеми управління станом
  - key: tools.state_management_pain_points.question
    t: З якими проблемами ви стикалися під час управління станом?

  # - key: tools.state_management_happiness
  #   t: Happiness
  # - key: tools.state_management_happiness.description
  #   t: How happy are you with the available state management libraries?

  - key: tools.data_loading_others
    t: Інші бібліотеки для завантаження даних
  - key: tools.data_loading_others.question
    t: Які ще бібліотеки ви використовували для завантаження даних?

  - key: tools.data_loading_pain_points
    t: Проблеми під час завантаження даних
  - key: tools.data_loading_pain_points.question
    t: З якими проблемами ви стикалися під час завантаження даних?

  # - key: tools.data_loading_happiness
  #   t: Happiness
  # - key: tools.data_loading_happiness.description
  #   t: How happy are you with the state of data loading libraries?

  - key: tools.meta_frameworks_others
    t: Інші метафреймворки
  # - key: tools.meta_frameworks_happiness
  #   t: Happiness
  # - key: tools.meta_frameworks_happiness.description
  #   t: How happy are you with the current state of meta-frameworks?

  - key: tools.meta_frameworks_heading
    t: Метафреймворки

  - key: tools.other_back_end_tools_heading
    t: Інші інструменти та сервіси для серверної частини

  - key: tools.back_end_infrastructure_pain_points
    t: Проблеми серверної частини
  - key: tools.back_end_infrastructure_pain_points.question
    t: З якими проблемами ви стикалися під час роботи із серверною частиною та інфраструктурою?

  - key: tools.testing
    t: Бібліотеки для тестування
  - key: tools.testing.question
    t: Які бібліотеки ви використовуєте для тестування ваших React-застосунків?

  # - key: tools.testing_happiness
  #   t: Happiness
  # - key: tools.testing_happiness.description
  #   t: How happy are you with the current state of testing libraries?

  - key: tools.mobile_development
    t: Розробка мобільних застосунків
  - key: tools.mobile_development.question
    t: Які фреймворки чи бібліотеки ви використовували для розробки мобільних застосунків?

  # - key: tools.mobile_development_others
  #   t: Other Mobile Development Tools
  # - key: tools.mobile_development_happiness
  #   t: Happiness
  # - key: tools.mobile_development_happiness.description
  #   t: How happy are you with the current state of mobile development?

  # other tools
  - key: tools.form_libraries
    t: Бібліотеки для форм
  # - key: tools.form_libraries.description
  #   t: Libraries for generating and validating forms.
  - key: tools.form_libraries.question
    t: Які бібліотеки ви використовували для роботи з формами?
  - key: options.form_libraries.na
    t: Жодна

  - key: tools.react_form_patterns
    t: Патерни форм
  - key: tools.react_form_patterns.question
    t: Який патерн форм ви зазвичай волієте використовувати?
  - key: options.react_form_patterns.form_patterns_controlled
    t: Контрольовані компоненти форми
  - key: options.react_form_patterns.form_patterns_uncontrolled
    t: Неконтрольовані компоненти форми
  - key: options.react_form_patterns.form_patterns_both
    t: Обидва залежно від ситуації

  - key: tools.build_tools
    t: Інструменти для збирання коду
  # - key: tools.build_tools.description
  #   t: Build tools and bundlers.
  - key: tools.build_tools.question
    t: Які інструменти для збирання та пакетування ви використовували?

  - key: tools.animation_libraries
    t: Анімації
  # - key: tools.animation.description
  #   t: Libraries to help manage animations and transitions.
  - key: tools.animation_libraries.question
    t: Які бібліотеки ви використовували для роботи з анімаціями?

  - key: tools.auth
    t: Автентифікація
  # - key: tools.auth.description
  #   t: Libraries and services for managing authentication and accounts.
  - key: tools.auth.question
    t: Які бібліотеки та сервіси ви використовували для автентифікації?

  - key: tools.data_visualization_libraries
    t: Візуалізація даних
  # - key: tools.data_visualization.description
  #   t: Data visualization and graphics libraries.
  - key: tools.data_visualization_libraries.question
    t: Які бібліотеки ви використовували для візуалізації даних та роботи з графікою?

  - key: tools.css_tools
    t: Інструменти та бібліотеки CSS 
  # - key: tools.css_tools.description
  #   t: CSS libraries, frameworks, and utilities you use to style your React app.
  - key: tools.css_tools.question
    t: Які бібліотеки або фреймворки ви використовували для стилізації ваших React-застосунків?

  - key: tools.other_frontend_frameworks
    t: Інші фреймворки для клієнтської частини
  # - key: tools.other_frontend_frameworks.description
  #   t: >
  #     Other front-end frameworks
  - key: tools.other_frontend_frameworks.question
    t: >
      Які ще фреймворки для клієнтської частини ви використовували?

  - key: tools.hosting
    t: Сервіси хостингу
  # - key: tools.hosting.description
  #   t: Services you use to host your React apps.
  - key: tools.hosting.question
    t: Які з-поміж цих сервісів ви використовували для хостингу ваших React-застосунків?

  - key: tools.backend_language
    t: Мови для серверної частини
  - key: tools.backend_language.question
    t: Якою мовою чи мовами написані ваші серверні застосунки?

  - key: tools.other_services
    t: Інші сервіси
  - key: tools.other_services.question
    t: Які ще сервіси ви використовували разом із вашими React-застосунками?

  - key: tools.validation
    t: Бібліотеки для створення схем даних та їхньої валідації
  - key: tools.validation.question
    t: Які бібліотеки ви використовували для валідації даних за певною схемою?

  - key: tools.ai_tools
    t: ШІ-інструменти
  - key: tools.ai_tools.question
    t: Які ШІ-інструменти або ШІ-сервіси ви використовували для допомоги у написанні React-коду?

  - key: tools.renderers
    t: Бібліотеки рендерингу React
  - key: tools.renderers.question
    t: Які бібліотеки ви використовували, щоб рендерити React-застосунок для різних платформ і середовищ?

  - key: tools.other_tools
    t: Інші інструменти
  - key: tools.tools.question
    t: Які ще інструменти ви використовували для розробки React-застосунків?

  # CSS
  - key: options.css_tools.plain_css
    t: CSS (звичайний, стандартний CSS)

  # react pain points

  - key: options.react_pain_points.rerenders
    t: Управління повторними рендерами компонентів
  - key: options.react_pain_points.testing
    t: Тестування
  - key: options.react_pain_points.data_loading
    t: Завантаження даних та асинхронні операції
  - key: options.react_pain_points.state_management
    t: Управління станом (`useState`, Redux, Context тощо)
  - key: options.react_pain_points.bundle_sizes
    t: Збереження малих розмірів пакету застосунку для клієнта
  - key: options.react_pain_points.server_rendering
    t: Рендеринг із боку сервера та серверні компоненти
  - key: options.react_pain_points.css_styling
    t: CSS та стилізація
  - key: options.react_pain_points.attribute_names
    t: '"Неправильні" назви атрибутів, як-от className, htmlFor тощо'
  - key: options.react_pain_points.synthetic_events
    t: Синтетичні події
  - key: options.react_pain_points.ref_management
    t: Управління посиланнями на DOM-вузли (refs)
  - key: options.react_pain_points.memoization
    t: Мемоїзація
  - key: options.react_pain_points.animations
    t: Анімації та переходи
  - key: options.react_pain_points.forms
    t: Форми
  - key: options.react_pain_points.typescript
    t: Нестача офіційного підтримання TypeScript

  # usage type
  - key: usage.react_usage_type
    t: Використання React
  - key: usage.react_usage_type.question
    t: Для чого ви переважно використовуєте React?

  # react version

  - key: usage.react_version
    t: Версія React
  - key: usage.react_version.question
    t: Яку версію React ви найчастіше використовуєте у повсякденній роботі?

  - key: options.react_version.react_v16x
    t: 16.x
  - key: options.react_version.react_v17x
    t: 17.x
  - key: options.react_version.react_v18x
    t: 18.x
  - key: options.react_version.react_canary
    t: Canary
  - key: options.react_version.not_sure
    t: Не впевнений(-а)

  # JS App Patterns

  - key: usage.js_app_patterns
    t: Патерни застосунків
  - key: usage.js_app_patterns.question
    t: Які з наведених патернів архітектури та рендерингу застосунків ви використовували **за останній рік**?

  - key: options.js_app_patterns.single_page_app
    t: Односторінковий застосунок (SPA)
  - key: options.js_app_patterns.single_page_app.description
    t: Застосунки, які працюють виключно у браузері
  - key: options.js_app_patterns.multiple_page_app
    t: Багатосторінковий застосунок (MPA)
  - key: options.js_app_patterns.multiple_page_app.description
    t: Застосунки, які відпрацьовують з боку сервера і мають мінімальну "динаміку" з боку клієнта
  - key: options.js_app_patterns.static_site_generation
    t: Генерація статичних сайтів (SSG)
  - key: options.js_app_patterns.static_site_generation.description
    t: Попередньо відрендерений під час збирання статичний вміст — з динамічним елементом із боку клієнта чи без нього
  - key: options.js_app_patterns.server_side_rendering
    t: Рендеринг із боку сервера (SSR)
  - key: options.js_app_patterns.server_side_rendering.description
    t: Динамічний рендеринг вмісту HTML з боку сервера за запитом — перед його регідрацією з боку клієнта
  - key: options.js_app_patterns.partial_hydration
    t: Часткова гідрація
  - key: options.js_app_patterns.partial_hydration.description
    t: Гідрація лише деяких ваших компонентів із боку клієнта (наприклад, React Server Components)
  - key: options.js_app_patterns.progressive_rehydration
    t: Поступова гідрація
  - key: options.js_app_patterns.progressive_rehydration.description
    t: Керування порядком гідрації компонентів із боку клієнта
  - key: options.js_app_patterns.islands_architecture
    t: Архітектура островів
  - key: options.js_app_patterns.islands_architecture.description
    t: Ізольовані острови з "динамікою", що мають кілька точок входу, у цілком статичному сайті (Astro, Eleventy)
  - key: options.js_app_patterns.progressive_enhancement
    t: Поступове покращення (Progressive Enhancement)
  - key: options.js_app_patterns.progressive_enhancement.description
    t: Надання функціональності застосунку навіть без JavaScript
  - key: options.js_app_patterns.incremental_static_generation
    t: Статична генерація з доповненням (incremental)
  - key: options.js_app_patterns.incremental_static_generation.description
    t: Здатність динамічно доповнювати або змінювати статичний сайт навіть після початкового збирання (Next.js ISR, Gatsby DSG)
  - key: options.js_app_patterns.streaming_ssr
    t: Потоковий SSR
  - key: options.js_app_patterns.streaming_ssr.description
    t: Розбиття вмісту, який рендериться сервером, на менші потокові частини
  - key: options.js_app_patterns.resumability
    t: Відновлення стану (Resumability)
  - key: options.js_app_patterns.resumability.description
    t: Серіалізація стану фреймворку з боку сервера, щоб клієнт міг продовжити виконання без дублювання коду.
  - key: options.js_app_patterns.edge_rendering
    t: Периферійний рендеринг (Edge Rendering)
  - key: options.js_app_patterns.edge_rendering.description
    t: Зміна відрендереного HTML на периферії перед його відправленням клієнту

  - key: options.js_app_patterns.micro_frontend
    t: Мікрофронтенди
  - key: options.js_app_patterns.domain_driven_design
    t: Предметно-орієнтоване проєктування
  - key: options.js_app_patterns.serverless
    t: Безсерверні обчислення (Serverless)
  - key: options.js_app_patterns.pespa
    t: PESPA (SPA з поступовим покращенням)

  - key: usage.what_do_you_use_react_for
    t: Використання React
  - key: usage.what_do_you_use_react_for.question
    t: Для чого ви використовуєте React?

  - key: usage.react_pain_points
    t: Проблеми React

  - key: usage.state_of_react
    t: Задоволення
  - key: usage.state_of_react.question
    t: Наскільки ви задоволені поточним станом React?

  - key: usage.usage_pain_points
    t: Інші проблеми
  - key: usage.usage_pain_points.question
    t: Чи є ще які-небудь проблеми щодо React, які ви хотіли б згадати?

  # new features
  - key: usage.new_features
    t: Нові функції
  - key: usage.new_features.question
    t: Які з-поміж цих останніх та майбутніх нових функцій цікавлять вас найбільше?

  - key: options.new_features.asset_loading
    t: Завантаження ресурсів (assets)
  - key: options.new_features.asset_loading.description
    t: Повна інтеграція Suspense із життєвим циклом завантаження стилів, шрифтів та зображень
  - key: options.new_features.cache.description
    t: API для допомоги з кешуванням даних.
  - key: options.new_features.react_forget.description
    t: Автоматичний реактивний компілятор для React
  - key: options.new_features.new_docs
    t: Нова документація
  - key: options.new_features.new_docs.description
    t: Оновлений сайт документації React.
  - key: options.new_features.offscreen_rendering
    t: Позаекранний рендеринг
  - key: options.new_features.offscreen_rendering.description
    t: Рендеринг екранів у фоновому режимі без додаткових витрат на продуктивність.
  - key: options.new_features.use_hook
    t: >
      Хук `use`
  - key: options.new_features.use_hook.description
    t: >
      `use` розпаковує значення Promise-об'єкта, але його можна використовувати всередині звичайних компонентів та хуків, включно з боку клієнта.

  - key: options.new_features.transition_tracing
    t: Відстежування переходів (transitions)
  - key: options.new_features.transition_tracing.description
    t: Для виявлення і дослідження моментів, коли і чому React-переходи стають повільнішими.

  # what do you use React for?
  - key: options.what_do_you_use_react_for.static_sites
    t: Статичні сайти
  - key: options.what_do_you_use_react_for.static_sites.description
    t: Попередньо відрендерені сайти з мінімальною взаємодією із сервером

  - key: options.what_do_you_use_react_for.design_systems
    t: Системи дизайну
  - key: options.what_do_you_use_react_for.design_systems.description
    t: Власні бібліотеки React-компонентів

  - key: options.what_do_you_use_react_for.web_apps
    t: Вебзастосунки
  - key: options.what_do_you_use_react_for.web_apps.description
    t: Застосунки для вебу зі складною взаємодією, станом, маршрутизацією тощо

  - key: options.what_do_you_use_react_for.mobile_apps
    t: Застосунки для мобільних пристроїв
  - key: options.what_do_you_use_react_for.mobile_apps.description
    t: Мобільні застосунки за допомогою React або React Native

  - key: options.what_do_you_use_react_for.desktop_apps
    t: Застосунки для настільних комп'ютерів
  - key: options.what_do_you_use_react_for.desktop_apps.description
    t: Застосунки, що працюють локально на настільному комп'ютері

  - key: options.what_do_you_use_react_for.hybrid_sites
    t: Гібридні сайти
  - key: options.what_do_you_use_react_for.hybrid_sites.description
    t: Традиційні сайти з додаванням динамічних клієнтських компонентів (наприклад, сайти електронної комерції)

  # resources
  - key: resources.learning_methods_react
    t: Методи навчання
  - key: resources.learning_methods_react.question
    t: Які джерела ви використовували для вивчення React?

  - key: resources.blogs_news_magazines_react
    t: Блоги
  - key: resources.blogs_news_magazines_react.question
    t: Які блоги, журнали або розсилки ви читаєте, щоб слідкувати за новинами щодо React?

  - key: resources.sites_courses_react
    t: Курси та навчальні матеріали
  - key: resources.sites_courses_react.question
    t: Які курси або інші матеріали (відео, книги тощо) ви використовували для вивчення React?

  - key: resources.podcasts_react
    t: Подкасти
  - key: resources.podcasts_react.question
    t: Які подкасти щодо React або веброзробки ви слухаєте?

  - key: resources.video_creators_react
    t: Відеоблогери
  - key: resources.video_creators_react.question
    t: За якими відеоблогерами у сфері React- або веброзробки ви стежите (на YouTube, Twitch тощо)?

  - key: resources.people_react
    t: Особистості
  - key: resources.people_react.question
    t: З-поміж особистостей у спільноті React — кого ви читаєте, за ким слідкуєте чи просто хочете виокремити?

  ###########################################################################
  # Entities repo - https://github.com/Devographics/entities
  ###########################################################################

  # Features

  # entities/features/react_features/react_apis.yml - 2025/01/30

  - key: entities.react_server_components.name
    t: Серверні компоненти React

  - key: entities.class_components.name
    t: >
      `Component` (класові компоненти)

  - key: entities.createelement.description
    t: >
      `createElement` дає змогу створювати React-елемент. Він є альтернативою написанню JSX.

  # entities/features/react_features/react_components.yml - 2025/01/30

  - key: entities.react_act.description
    t: >
      `act` — це помічник для тестів, щоб застосовувати очікувані оновлення в React перед перевіркою тверджень.

  # entities/features/react_features/react_hooks.yml - 2025/01/30

  - key: entities.useactionstate.name
    t: >
      `useActionState` (попередньо `useFormState`)
  - key: entities.useactionstate.description
    t: >
      `useActionState` — це хук, який дає змогу оновлювати стан залежно від результату дії форми.

  - key: entities.useoptimistic.description
    t: >
      `useOptimistic` — це хук React, який дає змогу "оптимістично" оновлювати UI.

  # entities/features/react_features/react_new_features.yml - 2025/01/30

  - key: entities.react_activity.name
    t: >
      `Activity` (попередньо `Offscreen`)

  - key: entities.server_actions.name
    t: Серверні дії

  - key: entities.preloading_resources.name
    t: Попереднє завантаження ресурсів

  - key: entities.ref_as_a_prop.name
    t: >
      `ref` як властивість (Prop)

  - key: entities.built_in_head_tag_support.name
    t: Вбудоване підтримування head-тегів 

  - key: entities.web_components_support.name
    t: Підтримування вебкомпонентів

  ###########################################################################
  # Entities found only in surveys repo - https://github.com/Devographics/surveys
  ###########################################################################

  ### Pain Points - state_of_react/react2024/results/data
  # /main_apis/main_apis_pain_points.json - 2025/01/30
  # /hooks/hooks_pain_points.json - 2025/01/30
  # /new_apis/new_apis_pain_points.json - 2025/01/30
  # /component_libraries/component_libraries_pain_points.json - 2025/01/30
  # /state_management/state_management_pain_points.json - 2025/01/30
  # /data_loading/data_loading_pain_points.json - 2025/01/30
  # /back_end_infrastructure/back_end_infrastructure_pain_points.json - 2025/01/30

  - key: entities.excessive_complexity.name
    t: Надмірна складність
  - key: entities.excessive_complexity.description
    t: Завелика складність

  # https://discord.com/channels/771563445023277056/878437777707008070/1334667936073515101
  - key: entities.context_api_rerendering.name
    t: Надмірні повторні рендери

  - key: entities.testing.name
    t: Тестування

  - key: entities.error_handling.name
    t: Обробка помилок

  - key: entities.dependency_arrays.name
    t: Масиви залежностей
  - key: entities.dependency_arrays.description
    t: >
      Задання ​​списку змінних, від яких залежить `useEffect`.

  - key: entities.excessive_rerendering.name
    t: Надмірні повторні рендери

  - key: entities.state_management.name
    t: Управління станом

  - key: entities.form_issues.name
    t: Проблеми форм

  - key: entities.nextjs_issues.name
    t: Проблеми Next.js

  - key: entities.server_client_issues.name
    t: Інтеграція клієнта та сервера

  - key: entities.ssr.description
    t: Проблеми рендерингу із боку сервера

  - key: entities.styling_customization.name
    t: Стилізація та кастомізація
  - key: entities.styling_customization.description
    t: Проблеми стилізації та кастомізації за допомогою CSS.

  - key: entities.tailwind_issues.name
    t: Проблеми Tailwind

  - key: entities.mui_issues.name
    t: Проблеми MUI

  - key: entities.performance.name
    t: Швидкодія
  - key: entities.performance.description
    t: Проблеми швидкодії

  - key: entities.styled_components_issues.name
    t: Проблеми styled-компонентів

  # https://discord.com/channels/771563445023277056/878437777707008070/1334667936073515101
  - key: entities.excesssive_rerendering.name
    t: Надмірні повторні рендери

  - key: entities.redux_issues.name
    t: Проблеми Redux

  - key: entities.too_much_boilerplate.name
    t: Надмірна шаблонність
  - key: entities.too_much_boilerplate.description
    t: Потрібно забагато повторюваних шаблонів

  - key: entities.global_state_management.name
    t: Управління глобальним станом

  - key: entities.synchronization_issues.name
    t: Проблеми синхронізації

  - key: entities.verbosity.name
    t: Надмірна багатослівність
  - key: entities.verbosity.description
    t: API занадто багатослівні чи докладні (verbose)

  - key: entities.mobx_issues.name
    t: Проблеми MobX

  - key: entities.maintenance.name
    t: Підтримування

  - key: entities.tough_learning_curve.name
    t: Складна крива вивчення

  - key: entities.caching.name
    t: Кешування

  - key: entities.apollo_issues.name
    t: Проблеми Apollo

  - key: entities.end_to_end_type_safety.name
    t: Наскрізна (e2e) типобезпечність

  - key: entities.deployment.name
    t: Розгортання
