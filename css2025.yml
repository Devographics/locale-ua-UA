locale: ua-UA
translations:
  - key: general.css2025.html2025_banner
    t: |
      Пройдіть опитування про стан HTML та допоможіть сформувати майбутнє вебу! →

  - key: general.css2025.survey_intro
    t: |

      У мене є лише один пункт у списку побажань до CSS на 2025 рік — повільніший темп!

      Після років стрімких нововведень, здається, розробникам браузерів варто ненадовго зупинитися: узгодити стандарти, виправити несумісності між браузерами і дати решті з нас змогу наздогнати.

      Все ж таки ми, мабуть, чули про вкладену сітку, :has() та анімації, керовані гортанням, а також про інші покращення CSS — але скільки з нас їх направду використовували, не кажучи вже про досконале опанування?

      Ось чому це опитування буде дуже цікавим. Це шанс побачити, які з нових CSS-функцій останніх років уже були прийняті спільнотою, а які — все ще у нашому списку "на потім".

      Тож ще раз, будь ласка, приєднуйтеся до цьогорічного "Стану CSS"!

  - key: introduction.css2025
    t: |
      <span class="first-letter">Я</span>к не пробачити повільне впровадження всіх цих новомодних функцій CSS. Зрештою, чи справді вони нам потрібні? А якщо потрібні, то чи працюють вони надійно в різних браузерах? 


      Але оскільки індикатори бази сумісності один за одним стають зеленими, а вдоволення від нових функцій і властивостей залишається високим, навіть найбільш неохочі з нас, здається, змушені визнати, що певні функції, як-от `:has()`, `aspect-ratio` та каскадні шари, виправдали своє місце в наших таблицях стилів. 


      Єдине питання — *коли*. Занадто рано, і ви зіткнетеся з проблемними моментами раннього впровадження. Занадто пізно, і ви пропустите покращення, які зекономлять час. 


      На щастя, наразі є надійна екосистема інструментів та джерел, присвячених відповіді на це питання, починаючи з цього ж опитування! 


      <span class="conclusion__byline">– Sacha Greif</span>

  ###########################################################################
  # Charts
  ###########################################################################

  - key: features.features_intro_css2025
    aliasFor: features.features_intro_css2024

  ###########################################################################
  # Sections Introductions
  ###########################################################################

  - key: sections.user_info.description.css2025
    t: |
      Цього року в опитуванні взяли участь **5506** розробників з усього світу.

  - key: sections.features.description.css2025
    t: |
      Не секрет, що CSS додає нові функції з рекордною швидкістю, тому цього року ми запитали про щонайменше *50* із них!

  - key: sections.tools.css2025
    t: Бібліотеки й інструменти

  - key: sections.tools.description.css2025
    t: |
      Незважаючи на численні можливості, відкриті новими функціями CSS, розробники досі покладаються на певний інструментарій та бібліотеки для підтримання свого робочого процесу — принаймні поки що.

  - key: sections.usage.description.css2025
    t: |
      Незалежно від того, як ви використовуєте CSS, все ще проблемно переконатися у працездатності коду в усіх браузерах — особливо для нових функцій, як-от `:has()`.

  - key: sections.resources.description.css2025
    t: |
      Будьте певні: з огляду на кількість нових функцій CSS, які безупинно з'являються, у нас найближчим часом не вичерпається матеріал для публікацій у блогах, подкастів, відео та курсів про СSS!

  ###########################################################################
  # Takeaways
  ###########################################################################

  # - key: user_info.country.takeaway.css2025
  #   t: >
  #     The survey remains U.S.-centric, but European countries continue

  - key: features.all_features.takeaway.css2025
    t: >
      Серед усіх функцій в опитуванні `:has()` є і найуживанішою, і найбільш улюбленою. Також варто відзначити: вкладена сітка посіла друге місце в рейтингу найулюбленіших функцій, тимчасом як `aspect-ratio` є другим за використанням і третім за ставленням користувачів. 


      Одразу після **вкладеної сітки** найбільше коментарів отримав `line-clamp` — і багато з них від респондентів із негативним ставленням до нього. 


      Найменш використовуваними виявилися `sibling-count` та `sibling-index`, що логічно, адже їхнє підтримання браузерами недавнє й обмежене. А найменш улюбленими загалом стали **тригонометричні функції**… без сумніву, через слово "тригонометрія"! 


      Нарешті, обов'язково застосуйте фільтр **Статус бази сумісності: "Широко доступно"**, щоб дізнатися, які функції можна використати вже сьогодні!

  - key: features.features_ratios_over_time.takeaway.css2025
    t: >
      Якщо подивитися на тенденції з часом і в контексті, вимальовується доволі цікава картина. Функцією з найбільшим приростом використання за рік стала `text-wrap: pretty`, а з найбільшим зростанням *впізнаваності* — `light-dark()`. 


      Зі свого боку **колірні функції** вирізняються тим, що займають нижні позиції за використанням, що може означати, що вони ще не знайшли свою аудиторію. 


      Нарешті, вкладка "Схвалення" дає змогу побачити різницю у позитивному сприйнятті між тими, хто цікавився функцією, і тими, хто направду її використовував. Наприклад, **якірне позиціонування** демонструє падіння до **-12%**, що може означати, що API є менш зручним, ніж очікувалося.

  - key: features.layout_pain_points.takeaway.css2025
    t: >
      Хоч **сітка** є безсумнівно потужною, ця потужність супроводжується стрімкою кривою навчання, яка може перетворити використання цієї комплексної функції на справжню проблему. 


      Далі в рейтингу — робота з висотою, переповненням, позиціонуванням і вирівнюванням, які досі є поширеними викликами для CSS-розробників.

  - key: features.shapes_graphics_pain_points.takeaway.css2025
    t: >
      Тепер, коли більш-менш освоїли прямокутники, ми почали звертати увагу на ширший світ трикутників, кіл і багатокутників. На жаль, малювання цих **складних фігур** досі залишається непростим завданням у разі використання самого лиш CSS. 


      Тому багато хто з нас вдається до **SVG** —  утім він теж не без перешкод.

  - key: features.colors_pain_points.takeaway.css2025
    t: >
      Багато респондентів хотіли б, щоб CSS вийшов за межі дихотомії світлого/темного режимів і надав більше інструментів для повноцінного управління темами, а також краще забезпечував належний **контраст** під час вибору кольорів. 


      І хоч нові колірні простори, як-от `oklch()`, справді дивовижні, вони тако само мають свої проблеми.

  - key: features.interactions_pain_points.takeaway.css2025
    t: >
      Поки багато хто з нас чекає на краще підтримання **анімацій, керованих гортанням**, інші звертають увагу на потенційні **проблеми доступності** нових шаблонів взаємодії, наприклад, **каруселей**. 


      Ще однією поширеною проблемою була складність "анімування до `auto`", що, на щастя, [тепер можливо](https://developer.chrome.com/docs/css-ui/animate-to-height-auto)!

  - key: features.typography_pain_points.takeaway.css2025
    t: >
      Керування вертикальним вирівнюванням тексту (відомим як **leading**) у браузері було проблемою стільки, скільки я пам'ятаю. На щастя, `text-box-edge` і `text-box-trim` обіцяють дати нам більш гнучкі інструменти для якісної роботи з типографікою онлайн.

  - key: features.math_features_pain_points.takeaway.css2025
    t: >
      Багато респондентів висловлювали претензії до `calc()`, особливо щодо роботи з одиницями вимірювання в обчисленнях.

  - key: features.other_features_pain_points.takeaway.css2025
    t: >
      Без сюрпризів, та **підтримання браузерами** залишається головною проблемою для CSS-функцій, згаданих у цьому розділі.

  - key: features.reading_list.takeaway.css2025
    t: >
      Маловідомий `::target-text` (про нього не чули 82% респондентів) очолив рейтинг доданого до списку читання — функцій, про які хотіли дізнатись більше.

  # other_tools

  - key: tools.css_frameworks.takeaway.css2025
    t: >
      Tailwind очолює рейтинг фреймворків і, здається, більше подобається менш досвідченим розробникам (медіанний досвід — 10 років), тимчасом як більш досвідчені респонденти використовують власні або внутрішні фреймворки (медіанний досвід — 15 років). 


      Водночас варто зазначити, що **47%** учасників опитування або взагалі не використовують фреймворк, або пропустили це питання.

  - key: tools.css_in_js.takeaway.css2025
    t: >
      **CSS Modules** зі своїм досить легким підходом залишаються популярними, тоді як **Styled Components** досі утримують друге місце.

  - key: tools.pre_post_processors.takeaway.css2025
    t: >
      **Sass** усе ще на першому місці, але загальне використання препроцесорів поступово зменшується, адже сам CSS переймає дедалі більше їхніх функцій.

  - key: tools.utilities.takeaway.css2025
    t: >
      **Prettier** — перевірений вибір для будь-якого розробника, але дещо нижче є багато менш відомих інструментів, які теж варто спробувати.

  - key: tools.browsers.takeaway.css2025
    t: >
      Коли йдеться про браузери, недаремно є поняття "велика четвірка", а показники їхнього використання майже не змінилися, як порівняти з минулим роком.

  # usage

  - key: usage.form_factors.takeaway.css2025
    t: >
      While testing environments don't show much change year over year, it's encouraging to see a small increase in respondents testing with keyboard-only and screen readers.


      It's also interesting to note that when comparing with company size, larger companies tend to test using screen readers at a higher rate.

  - key: usage.what_do_you_use_css_for.takeaway.css2025
    t: >
      While CSS started its life as a document layout system, it's now clear that interactive apps represent its primary use case–a fact that has been no doubt driving the language's recent evolution.

  - key: usage.industry_sector.takeaway.css2025
    t: >
      Many of us are building tools destined to be used internally within the developer community, which makes it much easier to adopt new features without worrying as much about browser compatibility.

  - key: usage.css_interoperability_features.takeaway.css2025
    t: >
      Not only did **Anchor Positioning** keep its number one spot, but the percentage of respondents citing it almost doubled.


      The **View Transition API** also climbed to number 3, while **Container style queries** gained a whopping **11 spots** in the rankings.


      On the other hand, **CSS Nesting** and `:has()` both lost ground, which makes sense since these features are now supported in all major browsers.

  - key: usage.css_missing_features.takeaway.css2025
    t: >
      **Mixins** are still the feature developers wish for the most, closely followed by **Masonry Layout**. Both have long been possible using workarounds such as pre-processors or JavaScript, but it would be nice to see them natively supported in CSS!

  - key: usage.css_general_pain_points.takeaway.css2025
    t: >
      **Browser Support** may still be the dominant CSS pain point in 2025, but the fact that only a relatively small 10% of question respondents mentioned it is a testament to recent improvements in this domain.

  - key: usage.favorite_new_features.takeaway.css2025
    t: >
      While `:has()` is still number one, it did lose a bit of ground, as the **View Transition API** and especially **Anchor Positioning** (which gained 8 spots) start seeing wider adoption.

  - key: usage.gamechanger_feature.takeaway.css2025
    t: >
      Every new CSS feature has its use, but only a few of them are real game-changers. It turns out **Grid**, `:has()`, and **CSS Nesting** are the features that most changed how we write CSS in recent years.

  - key: usage.baseline_awareness.takeaway.css2025
    t: >
      We wanted to see how familiar respondents are with the Baseline browser compatibility indicator (which you can see in use throughout these very survey results!).


      Despite our clever traps in the form of fake answers, the vast majority of you successfuly negotiated the question! Younger respondents in particular showed higher awareness of Baseline, no doubt due to the recent Baseline integration in Fortnite (…just kidding).

  - key: usage.css_pace_of_change.takeaway.css2025
    t: >
      Adopting a new feature is usually a multi-stage process: first, you hear about it a few times over the course of months or years, until you form a solid idea of what it does. Then, you might try it out on an experimental side project, before finally adopting it in production. 


      This chart shows that most of us are squarely in the middle of this journey, having learned about and tried out only part of the feature set presented in this survevy.

  - key: usage.state_of_the_web_happiness.takeaway.css2025
    t: >
      Happiness with the web has been fairly stable over the past years, neither going up or down.

  - key: usage.state_of_css_happiness.takeaway.css2025
    t: >
      On the other hand, happiness with CSS specifically shows a clear upwards trend in recent years, which happens to align nicely with the language's own rapid pace of improvement.

  # resources
  - key: resources.podcasts.takeaway.css2025
    t: >
      **Syntax** досі домінує у світі подкастів і навіть зумів додати чималу слухацьку аудиторію — **+8%**! 


      Почесні згадки отримують **подкаст від Kevin Powell** та **Podrocket** — обидва піднялися на 4 позиції.

  - key: resources.video_creators.takeaway.css2025
    t: >
      **Kevin Powell** викарбував нішу короля CSS на YouTube, але творці з більш загальним фокусом, як-от **Theo** та **The Primeagen**, теж намагаються не відставати. 


      **Syntax** успішно продовжує перехід у відеоформат, додавши **5%** та **5 позицій** за рік.

  - key: resources.people.takeaway.css2025
    t: >
      **Josh**, **Kevin**, **Adam** та **Una** продовжують очолювати рейтинги впливових діячів у сфері CSS — про це свідчить навіть той факт, що ви й так знали, про кого я, хоч і не вказав їхніх прізвищ.

  - key: resources.web_platform_resources.takeaway.css2025
    t: >
      **MDN** — чудове безкоштовне джерело для вивчення CSS, але аж ніяк не єдине, що видно з цього короткого списку корисних посилань.

  - key: resources.other_surveys.takeaway.css2025
    t: >
      Хоч респонденти здебільшого беруть участь і в інших опитуваннях нашого формату "State of", а також в опитуванні **Stack Overflow**, варто знати й про **JetBrains Developer Ecosystem Survey**.

  ###########################################################################
  # Awards
  ###########################################################################

  - key: award.most_used_feature_award.comment
    t: |
      `:has()` було широко впроваджено спільнотою — його використали {value}!

  - key: award.least_used_feature_award.comment
    t: |
      Лише {value} використання — і `sibling-count` досі далекий від мейнстриму.

  - key: award.most_loved_feature_award.comment
    t: |
      Оскільки {value} респондентів мають позитивне ставлення до `:has()`, він посідає перше місце в нашому рейтингу.

  - key: award.most_hated_feature_award.comment
    t: |
      Лише {value} респондентів справді ненавидять тригонометрію, але цього досить, щоб **тригонометричні функції** опинилися на самому дні рейтингу тих, хто подобається :(

  - key: award.largest_awareness_progression_award.comment
    t: |
      Як порівняти з минулим роком, іще {value} респондентів більше не блукають у темряві щодо `light-dark()`!

  - key: award.largest_usage_progression_award.comment
    t: |
      Використання зросло на {value}: `text-wrap: pretty` демонструє дуже гарні результати!

  - key: award.most_commented_feature_award.comment
    t: |
      **Вкладена сітка (Subgrid)** отримала понад {value} коментарів — частково тому, що вона була на початку опитування, але також і через те, що це направду варта схвалення функція!

  ###########################################################################
  # FAQ/About
  ###########################################################################

  - key: faq.how_long_will_survey_take_css2025
    aliasFor: faq.how_long_will_survey_take_css2024
  - key: faq.how_long_will_survey_take_css2025.description
    aliasFor: faq.how_long_will_survey_take_css2024.description

  - key: faq.learn_more_css2025
    t: Де я можу дізнатися більше?
  - key: faq.learn_more_css2025.description
    t: Ви можете дізнатися більше про це опитування у [нашому анонсі](https://dev.to/sachagreif/the-2024-state-of-css-survey-is-now-open-4o5h).

  - key: faq.survey_design_css2025
    t: Як було розроблено це опитування?
  - key: faq.survey_design_css2025.description
    t: >
      Опитування було розроблено унаслідок [відкритого процесу розробки](https://github.com/Devographics/surveys/issues/289) із залученням постачальників браузерів і спільноти веброзробки.

  - key: faq.results_released_css2025
    t: Коли будуть опубліковані результати?
  - key: faq.results_released_css2025.description
    t: Опитування триватиме із 1 червня до 1 липня 2025 року, і його результати будуть опубліковані незабаром після завершення.

  - key: about.content.css2025
    t: >
      Опитування "Cтан CSS 2025" тривало із 1 червня до 15 липня 2025 року та зібрало 5506 відповідей. Опитування проводив [Devographics](https://www.devographics.com/) із допомогою команди консультантів та учасників проєктів із відкритим програмним кодом. 


      Логотип і футболку "Стан CSS" розробив та анімував [Christopher Kirk-Nielsen](http://chriskirknielsen.com/). 


      ### Цілі опитування 

      Це опитування було створено для визначення майбутніх тенденцій в екосистемі веброзробки, щоб допомогти розробникам здійснити вибір з-поміж наявних технологій. 


      Так опитування зосереджено більше на передбаченні того, що станеться протягом наступних кількох років, ніж на аналізі того, що популярно саме зараз, — ось чому деякі функції чи технології іноді можуть не згадуватися попри широке впровадження. 


      Постачальники браузерів також використовують ці дані, щоб визначати пріоритетні напрями діяльності та узасаднювати ініціативи, як-от [Interop 2025](https://web.dev/blog/interop-2025). 


      ### Розробка опитування 

      Опитування було розроблено колегіально [на платформі GitHub](https://github.com/Devographics/surveys/issues/245). 

      ### Аудиторія опитування 

      Опитування було повністю відкрите та доступне онлайн, респонденти жодним чином не відфільтровувалися та не відбиралися. Респонденти складалися здебільшого з учасників минулих опитувань (сповіщених електронною поштою за спеціальним списком розсилання) та тих, хто прийшов через соціальні мережі. 

      ### Фінансування проєкту 

      Окрім як із продажу футболок, цей проєкт фінансується з різних джерел: 

      - Наш партнер [Frontend Masters](https://frontendmasters.com/) спонсорує опитування в обмін на розміщення відповідних посилань на їхні курси у нижній частині кожної сторінки. 

      - Цього року команда [Google Chrome](https://www.google.com/chrome/) виділила спонсорський бюджет, щоб допомогти розробити та провести опитування. 

      - [TokyoDev](https://www.tokyodev.com/) також регулярно спонсорує це опитування. 

      ### Технічний огляд 

      Більш детальний технічний огляд того, як проводяться опитування, [тут](https://dev.to/sachagreif/how-the-devographics-surveys-are-run-2023-edition-1p6a). Код проєкту є [відкритим](https://github.com/Devographics/Monorepo/). 

      ### Зворотний зв'язок 


      - [Повідомити про технічну проблему](https://github.com/Devographics/Monorepo/issues) 

      - [Додати пропозицію на наступний рік](https://github.com/Devographics/surveys/issues/249) 

      - [Інші нетехнічні проблеми](https://github.com/Devographics/surveys/issues) 

      - [Завітати у наш Discord-чат](https://discord.gg/tuWRUWVyJs) 

  ###########################################################################
  # Picks
  ###########################################################################

  - key: picks.my_pick.css2025
    t: "Мій вибір 2025: "
  - key: picks.intro
    t: Ми покликали спільноту CSS поділитися своїм "вибором року"

  # https://linear-easing-generator.netlify.app/
  - key: picks.josh_comeau.name
    t: |
      Генератор функції-пом'якшення `linear()`
  - key: picks.josh_comeau.bio
    t: Інді-розробник та освітній діяч
  - key: picks.josh_comeau.description
    t: |
      Description: The `linear()` timing function has quickly become one of my favourite modern features, and this lovely tool makes it easy to quickly generate CSS springs from JS logic!

  # https://developer.mozilla.org/en-US/docs/Web/CSS/if
  - key: picks.ahmad_shadeed.name
    t: |
      `if()`
  - key: picks.ahmad_shadeed.bio
    t: Дизайн-інженер, автор [debuggingcss.com](https://debuggingcss.com)
  - key: picks.ahmad_shadeed.description
    t: |
      Combined with `:has()` and style queries, `if()` will help us do even more conditional stuff in CSS.

  # https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap
  - key: picks.kilian_valkhof.name
    t: |
      `text-wrap: balance;`
  - key: picks.kilian_valkhof.bio
    t: Автор [Polypane](https://polypane.app/)
  - key: picks.kilian_valkhof.description
    t: |
      I can’t remember the last time a new CSS property was introduced that I could just add to any stylesheet new and old. It’s a little magic one liner that makes your titles much nicer with zero downsides. Add it to your css resets!

    # https://codepen.io/thebabydino/pen/LEExpVg
  - key: picks.ana_tudor.name
    t: Поєднання функцій
  - key: picks.ana_tudor.bio
    t: CSS Mad Scientist
  - key: picks.ana_tudor.description
    t: |
      My pick not as much a single feature that changes things, as it is the way multiple features can be used together.

      For example, subgrid + the new `corner-shape` (or the `shape()` clip-path function) to get content-dependant shapes with concave roundings that aren't necessarily circular.

  # https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Values_and_Units/Using_CSS_math_functions
  - key: picks.amit_sheen.name
    t: Математичні функції в CSS
  - key: picks.amit_sheen.bio
    t: Веброзробник та креативний програміст
  - key: picks.amit_sheen.description
    t: |
      Math is the language of the universe, of life itself, and without it, we wouldn’t be able to describe, measure, or build anything with clarity. 

      So the fact that we can now use these functions natively in CSS only strengthens our capabilities and opens up a whole world of new possibilities.

  # https://miocene.io/
  - key: picks.sacha_greif.name
    t: Julia Miocene
  - key: picks.sacha_greif.bio
    t: Мейнтейнер State of CSS
  - key: picks.sacha_greif.description
    t: |
      When you spend days on end debugging a layout or styling forms, it's easy to forget that front-end coding can also be enjoyed for its own sake. Julia's amazing work is a great reminder of the joy and creativity that can be found in CSS, if you just take the time to look for it.

  # https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API
  - key: picks.julia_miocene.name
    t: View Transition API
  - key: picks.julia_miocene.bio
    t: Дизайнерка продукту, UX-інженерка, аніматорка "чистим" CSS
  - key: picks.julia_miocene.description
    t: |
      My pick of the year is the View Transition API. It helped me get rid of JS code and complex animation tricks. Now I can animate generated content and user interactions with ease ✨

  # https://modern-fluid-typography.vercel.app/
  - key: picks.ana_rodrigues.name
    t: |
      Генератори кеглю шрифтів із clamp
  - key: picks.ana_rodrigues.bio
    t: Розробниця клієнтської частини в [Hactar.is](https://hactar.is/)
  - key: picks.ana_rodrigues.description
    t: |
      My pick of the year is all the font clamp generators that people have been creating and sharing. What’s great about them is that they are all so different so it accommodates different learning styles. Especially, if reading documentation alone doesn’t help understanding how something works.

  # https://piccalil.li/blog/
  - key: picks.saron_yitbarek.name
    t: Picalilli
  - key: picks.saron_yitbarek.bio
    t: Євангелістка вебу в Apple
  - key: picks.saron_yitbarek.description
    t: |
      I've been following Piccalili for a while and I love that they have free technical articles alongside more in-depth paid courses so you can pick what flavor of learning you're up for. And as a business, they're so thoughtful about understanding the web community and making ethical business decisions that allow them to do great work without feeling icky about how they make money.

  # https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/light-dark
  - key: picks.sara_joy.name
    t: |
      Функція `light-dark()`
  - key: picks.sara_joy.bio
    t: Розробниця клієнтської частини
  - key: picks.sara_joy.description
    t: |
      Once using `color-scheme` in CSS, using `light-dark()` to declare colors based upon whether light or dark mode is currently in use feels like a no-brainer. I'm currently enjoying following [this discussion thread](https://github.com/w3c/csswg-drafts/issues/10577) about what further logic we may use in the future, to query color-scheme and change CSS conditionally.

  - key: frontendmasters.learning_path
    t: |
      Ваш шлях до того, щоб стати старшим веброзробником

  - key: frontendmasters.learning_path.description
    t: |
      Хочете покращити свою кар'єру? Заглибтеся у JavaScript, React, швидкодію у вебі, CSS, розгортання вебсайтів, TypeScript та функціональне програмування, щоб перейти від молодшого до старшого рівня вже сьогодні.

  ###########################################################################
  # Figures
  ###########################################################################

  - key: figure.figure_has_usage.css2025
    t: Відсоток респондентів, які використовували `:has()`.

  - key: figure.figure_light_dark_awareness.css2025
    t: Приріст відсотка респондентів, які чули про `light-dark()`, за рік.

  - key: figure.figure_css_in_js.css2025
    t: Відсоток респондентів опитування, які використовують CSS-in-JS.

  - key: figure.figure_anchor_positioning.css2025
    t: Приріст відсотка респондентів, які хотіли б використовувати функцію якірного позиціонування, за рік.

  ###########################################################################
  # Conclusion
  ###########################################################################

  - key: conclusion.css2025.amit_sheen
    t: |

      <span class="first-line">Це вже не той CSS, який ми знали (і це добре).</span> 

      Після перегляду результатів опитування очевидно, що CSS вже не є мовою "лише" для додавання стилів. Він пережив фундаментальні зміни, узявши на себе значно більшу роль у створенні компонувань, анімацій, забезпеченні сумісності та, звісно ж, доступності. Ця зміна допомагає переосмислити ідентичність CSS — не як застарілої мови стилів, а як сучасного, виразного набору інструментів, який нарешті отримує заслужене визнання. 

      Також цей зсув змінив те, як ми пишемо CSS. Інтерактивні вебзастосунки витіснили статичні сторінки як основний варіант використання, нативні функції мови замінюють багато абстракцій фреймворків і препроцесорів, а ширше підтримання браузерами дало розробникам упевненість досліджувати нові можливості. Нарешті люди охочіше експериментують, тестуючи функції одразу після їхньої появи, адже вони вірять, що покращення стандартів й інструментів зробить упровадження більш плавним. 

      Ще одним символом цієї трансформації, на якому опитування не зосереджувалося, є оновлений логотип CSS. Для мене він означає початок нового етапу: мова відмовилася від цифри три на своєму значку і разом із нею — від прикутості до минулої версії. Натомість з'явився свіжий, сучасний знак, який демонструє упевненість і готовність рухатися до світлішого майбутнього. 

      Незважаючи на цей відчутний дух оновлення, опитування також нагадує, у чому CSS і досі поступається. Попри прогрес, багато респондентів досі зіштовхуються зі складнощами у створенні складних компонувань та високою швидкістю змін, і кажуть, що контроль висоти, переповнення та вирівнювання може бути доволі виснажливим і дратівливим. Є чіткий запит на певні функції, як-от домішки, компонування masonry та умовна логіка, які принесли б зручності препроцесорів безпосередньо в мову. І хоч різниця між браузерами вже не домінує у списку скарг, вона все ж не зникла повністю, тож роботи ще чимало. 

      Поряд із цими викликами опитування виділяє й деякі успіхи. Селектор `:has`, контейнерні запити та `subgrid` (вкладена сітка) перейшли зі списків бажаного до щоденного практикування, і респонденти називають їх одними з найулюбленіших функцій. Нові ініціативи, як-от індикатор Baseline (база сумісності) та проєкт Interop, підвищили впевненість у тому, що нові функції швидко дозріють, роблячи раннє впровадження менш ризикованим. Це зростання довіри до мови та її екосистеми пояснює, чому задоволення від роботи із CSS продовжує підніматися вгору, тоді як загальна задоволеність вебтехнологіями залишається стабільною. 

      Дивлячись уперед, цей момент радше відчувається як початок, а не як завершення. Опитування показує спільноту, готову приймати нові інструменти, яка прагне усунути наявні прогалини й упевнену, що мова продовжить еволюціонувати. Якщо ми збережемо цю допитливість і співпрацю, CSS і надалі розвиватиметься так, що сьогодні важко уявити, а наступне опитування продемонструє ще багатший ландшафт. 

      Якщо 2025 рік був про стабілізацію неможливого, то 2026 може стати роком втілення давніх мрій. Для тих, хто любить CSS, ніколи ще не було кращого часу для експериментів, навчання й участі у формуванні того, що буде далі.

  - key: conclusion.css2025.amit_sheen.bio
    t: Веброзробник та креативний програміст
